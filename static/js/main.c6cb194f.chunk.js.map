{"version":3,"sources":["InfoTable.js","DataTable.js","UserInputs.js","MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["InfoTable","props","name","info","className","titleCase","Object","keys","filter","k","toLowerCase","map","key","DataTable","title","rows","length","col","row","location","UserInputs","showPolygon","showCircle","date","metric","onChangeShowMap","onChangeShowCircle","onChangeDate","onChangeMetric","dateOptions","metricOptions","useState","hidden","setHidden","onClick","type","id","checked","value","onChange","disabled","selected","el","str","words","split","i","titleCaseWithSlash","join","charAt","toUpperCase","slice","GoogleApiWrapper","apiKey","google","data","setData","polygons","setPolygons","descriptions","setDescriptions","showInfoWindow","setShowInfoWindow","activeLocation","setActiveLocation","infoWindowPosition","setInfoWindowPosition","setDate","setMetric","setShowPolygon","setShowCircle","circleRadii","setCircleRadii","processData","spreadsheetData","dirtData","polygonData","tabName","includes","elements","filteredElements","Date","getTime","forEach","lat","lng","push","onInfoWindowClose","getPolygonPosition","paths","bounds","maps","LatLngBounds","latLngPaths","path","LatLng","extend","getCenter","calculateCircleRadii","circleDate","circleMetric","metrics","find","total","values","reduce","a","c","newRadii","radii","Math","floor","parseFloat","useEffect","Tabletop","init","parseNumbers","callback","e","target","zoom","color","team","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","polygon","onPolygonClick","radius","center","position","visible","onClose","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6cb194f.chunk.js","sourcesContent":["import { titleCase } from \"./MapContainer\";\n\nexport default function InfoTable(props) {\n  const { name, info } = props;\n\n  return (\n    <table className=\"info-table\">\n      <tr>\n        <td className=\"bold\">Name</td>\n        <td>{titleCase(name)}</td>\n      </tr>\n      {!!info &&\n        Object.keys(info)\n          .filter((k) => k.toLowerCase() !== \"location\")\n          .map((key) => {\n            return (\n              <tr key={key}>\n                <td className=\"bold\">{titleCase(key)}</td>\n                <td>{info[key]}</td>\n              </tr>\n            );\n          })}\n    </table>\n  );\n}\n","export default function DataTable(props) {\n  const { title, rows } = props;\n\n  if (!rows || !rows.length) return;\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <table className=\"data-table\">\n        <tr>\n          {Object.keys(rows[0]).map((col) => (col.toLowerCase() !== \"location\" ? <th key={col}>{col}</th> : null))}\n        </tr>\n        {rows.map((row) => {\n          return (\n            <tr key={row.location}>\n              {Object.keys(row).map((key) => {\n                return key !== \"site\" && key !== \"location\" ? <td key={key}>{row[key]}</td> : null;\n              })}\n            </tr>\n          );\n        })}\n      </table>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nexport default function UserInputs(props) {\n  const {\n    showPolygon,\n    showCircle,\n    date,\n    metric,\n    onChangeShowMap,\n    onChangeShowCircle,\n    onChangeDate,\n    onChangeMetric,\n    dateOptions,\n    metricOptions,\n  } = props;\n\n  const [hidden, setHidden] = useState(false);\n\n  if (hidden) {\n    return (\n      <div className=\"user-inputs\">\n        <button onClick={() => setHidden(false)}>More Options</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-inputs\">\n      <button onClick={() => setHidden(true)}>Hide</button>\n      <div className=\"user-input-section\">\n        <div className=\"user-input-label\">\n          <label>Show Map Area:</label>\n        </div>\n        <input\n          type=\"checkbox\"\n          id=\"show-map\"\n          name=\"show-map\"\n          checked={showPolygon}\n          value={showPolygon}\n          onChange={onChangeShowMap}\n        />\n      </div>\n\n      <div className=\"user-input-section\">\n        <div className=\"user-input-label\">\n          <label>Date:</label>\n        </div>\n        <select value={date} onChange={onChangeDate}>\n          <option disabled selected value>\n            -- select an option --\n          </option>\n          {dateOptions.map((el) => {\n            return (\n              <option key={el.date} value={el.date}>\n                {el.date}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div className=\"user-input-section\">\n        <div className=\"user-input-label\">\n          <label>Metric:</label>\n        </div>\n        <select value={metric} onChange={onChangeMetric}>\n          <option disabled selected value>\n            -- select an option --\n          </option>\n          {metricOptions.map((key) => {\n            return key !== \"date\" && key !== \"location\" ? (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ) : null;\n          })}\n        </select>\n      </div>\n      {date && metric ? (\n        <div className=\"user-input-section\">\n          <div className=\"user-input-label\">\n            <label>Show Circles:</label>\n          </div>\n          <input\n            type=\"checkbox\"\n            id=\"show-circle\"\n            name=\"show-circle\"\n            checked={showCircle}\n            value={showCircle}\n            onChange={onChangeShowCircle}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","// import react from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Map, InfoWindow, GoogleApiWrapper, Polygon, Circle } from \"google-maps-react\";\nimport Tabletop from \"tabletop\";\nimport InfoTable from \"./InfoTable\";\nimport DataTable from \"./DataTable\";\nimport UserInputs from \"./UserInputs\";\n\nexport function titleCase(str) {\n  const words = str.toLowerCase().split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    words[i] = titleCaseWithSlash(words[i]);\n  }\n\n  return words.join(\" \");\n}\n\nfunction titleCaseWithSlash(str) {\n  const words = str.toLowerCase().split(\"/\");\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n  }\n\n  return words.join(\"/\");\n}\n\nfunction MapContainer(props) {\n  const { google } = props;\n\n  const [data, setData] = useState({});\n  const [polygons, setPolygons] = useState({});\n  const [descriptions, setDescriptions] = useState({});\n  const [showInfoWindow, setShowInfoWindow] = useState(true);\n  const [activeLocation, setActiveLocation] = useState(\"\");\n  const [infoWindowPosition, setInfoWindowPosition] = useState(null);\n  const [date, setDate] = useState(null);\n  const [metric, setMetric] = useState(null);\n  const [showPolygon, setShowPolygon] = useState(true);\n  const [showCircle, setShowCircle] = useState(false);\n  const [circleRadii, setCircleRadii] = useState({});\n\n  function processData(spreadsheetData) {\n    const dirtData = {};\n    const polygonData = {};\n    const descriptions = {};\n\n    // loop through each tab and process according if it's a data or map-area tab\n    for (const tabName in spreadsheetData) {\n      if (tabName.includes(\"(Data)\")) {\n        const location = spreadsheetData[tabName].elements[0].location;\n\n        const filteredElements = spreadsheetData[tabName].elements.filter((el) => {\n          const date = new Date(el.date).getTime();\n          const today = new Date().getTime();\n          // filter for dates within past 90 days, units are in ms\n          return today - date < 90 * 24 * 60 * 60 * 1000;\n        });\n\n        dirtData[location] = filteredElements;\n      } else if (tabName === \"Map Coordinates\") {\n        spreadsheetData[tabName].elements.forEach((row) => {\n          const { location, lat, lng } = row;\n\n          const locationPolygon = polygonData[location];\n          if (!locationPolygon) {\n            polygonData[location] = [];\n          }\n          polygonData[row.location].push({\n            lat,\n            lng,\n          });\n        });\n      } else if (tabName === \"Descriptions\") {\n        spreadsheetData[tabName].elements.forEach((row) => {\n          descriptions[row.location] = row;\n        });\n      }\n    }\n    setDescriptions(descriptions);\n    setPolygons(polygonData);\n    setData(dirtData);\n  }\n\n  useEffect(() => {\n    Tabletop.init({\n      key: \"https://docs.google.com/spreadsheets/d/19Za-wgC1G_-TcFNm3j7iMpbmbF9P-PoaA_qKKhyRQCs/pubhtml\",\n      parseNumbers: true,\n      callback: processData,\n    });\n  }, []);\n\n  function onInfoWindowClose() {\n    setShowInfoWindow(false);\n    setActiveLocation(\"\");\n  }\n\n  function onMapClicked() {\n    if (showInfoWindow) {\n      onInfoWindowClose();\n    }\n    setShowInfoWindow(false);\n    setInfoWindowPosition(null);\n    setActiveLocation(\"\");\n  }\n\n  function onPolygonClick(polygon) {\n    setInfoWindowPosition(getPolygonPosition(polygon.paths));\n    setShowInfoWindow(true);\n  }\n\n  function getPolygonPosition(paths) {\n    let bounds = new google.maps.LatLngBounds();\n    const latLngPaths = paths.map((path) => new google.maps.LatLng(path.lat, path.lng));\n\n    for (let i = 0; i < latLngPaths.length; i++) {\n      bounds.extend(latLngPaths[i]);\n    }\n\n    return bounds.getCenter();\n  }\n\n  function calculateCircleRadii(circleDate, circleMetric) {\n    if (!circleDate || !circleMetric) return {};\n\n    const metrics = {};\n    Object.keys(data).forEach((location) => {\n      metrics[location] = data[location].find((row) => {\n        return row.date === circleDate;\n      })[circleMetric];\n    });\n\n    const totalRadii = 1500;\n    const total = Object.values(metrics).reduce((a, c) => a + c);\n\n    const newRadii = {};\n    for (const location in metrics) {\n      newRadii[location] = {\n        value: metrics[location],\n        radii: total ? Math.floor(parseFloat(metrics[location] / total) * totalRadii) : 0,\n      };\n    }\n\n    setCircleRadii(newRadii);\n  }\n\n  return (\n    <div>\n      <UserInputs\n        showPolygon={showPolygon}\n        showCircle={showCircle}\n        date={date}\n        metric={metric}\n        onChangeShowMap={() => setShowPolygon(!showPolygon)}\n        onChangeShowCircle={() => setShowCircle(!showCircle)}\n        onChangeDate={(e) => {\n          setDate(e.target.value);\n          calculateCircleRadii(e.target.value, metric);\n        }}\n        onChangeMetric={(e) => {\n          setMetric(e.target.value);\n          calculateCircleRadii(date, e.target.value);\n        }}\n        dateOptions={data[Object.keys(data)[0]] ? data[Object.keys(data)[0]] : []}\n        metricOptions={Object.keys(data).length ? Object.keys(data[Object.keys(data)[0]][0]) : []}\n      />\n\n      <Map google={google} zoom={14} onClick={onMapClicked}>\n        {showPolygon\n          ? Object.keys(polygons).map((key) => {\n              let color;\n\n              if (descriptions[key].team === \"Market\") {\n                color = \"orange\";\n              } else if (descriptions[key].team === \"Mission\") {\n                color = \"lightgreen\";\n              }\n\n              return (\n                <Polygon\n                  key={key}\n                  paths={polygons[key]}\n                  strokeColor={color}\n                  strokeOpacity={0.35}\n                  strokeWeight={2}\n                  fillColor={color}\n                  fillOpacity={0.35}\n                  onClick={(polygon) => {\n                    setActiveLocation(key);\n                    onPolygonClick(polygon);\n                  }}\n                />\n              );\n            })\n          : null}\n        {showCircle\n          ? Object.keys(polygons).map((key) => {\n              let color;\n\n              if (descriptions[key].team === \"Market\") {\n                color = \"red\";\n              } else if (descriptions[key].team === \"Mission\") {\n                color = \"blue\";\n              }\n\n              return (\n                <Circle\n                  key={key}\n                  radius={circleRadii[key] ? circleRadii[key].radii : 0}\n                  center={getPolygonPosition(polygons[key])}\n                  strokeColor={color}\n                  strokeOpacity={0}\n                  strokeWeight={5}\n                  fillColor={color}\n                  fillOpacity={0.6}\n                />\n              );\n            })\n          : null}\n        {activeLocation ? (\n          <InfoWindow position={infoWindowPosition} visible={showInfoWindow} onClose={onInfoWindowClose}>\n            <div className=\"info-window\">\n              <h1>{titleCase(activeLocation)}</h1>\n              <InfoTable name={activeLocation} info={descriptions[activeLocation]} />\n              <DataTable title=\"Past 90 Days\" rows={data[activeLocation]} />\n            </div>\n          </InfoWindow>\n        ) : null}\n      </Map>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBoaMwtEv26-QexJ0Zge-FhO08jVdYTioQ\",\n})(MapContainer);\n","import MapContainer from \"./MapContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}