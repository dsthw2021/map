{"version":3,"sources":["InfoTable.js","DataTable.js","MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["InfoTable","props","name","info","className","titleCase","Object","keys","filter","k","toLowerCase","map","key","DataTable","title","rows","length","col","row","str","split","i","charAt","toUpperCase","slice","join","GoogleApiWrapper","apiKey","google","useState","data","setData","polygons","setPolygons","descriptions","setDescriptions","showInfoWindow","setShowInfoWindow","activeLocation","setActiveLocation","infoWindowPosition","setInfoWindowPosition","processData","spreadsheetData","dirtData","polygonData","tabName","includes","location","elements","filteredElements","el","date","Date","getTime","forEach","lat","lng","push","onInfoWindowClose","useEffect","Tabletop","init","parseNumbers","callback","zoom","onClick","paths","polygon","onPolygonClick","position","visible","onClose","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f1cbbf3.chunk.js","sourcesContent":["import { titleCase } from \"./MapContainer\";\n\nexport default function InfoTable(props) {\n  const { name, info } = props;\n\n  return (\n    <table className=\"info-table\">\n      <tr>\n        <td className=\"bold\">Name</td>\n        <td>{titleCase(name)}</td>\n      </tr>\n      {!!info &&\n        Object.keys(info)\n          .filter((k) => k.toLowerCase() !== \"location\")\n          .map((key) => {\n            return (\n              <tr>\n                <td className=\"bold\">{titleCase(key)}</td>\n                <td>{info[key]}</td>\n              </tr>\n            );\n          })}\n    </table>\n  );\n}\n","export default function DataTable(props) {\n  const { title, rows } = props;\n\n  if (!rows || !rows.length) return;\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <table className=\"data-table\">\n        <tr>\n          {Object.keys(rows[0]).map((col) => (\n            <th>{col}</th>\n          ))}\n        </tr>\n        {rows.map((row) => {\n          return (\n            <tr>\n              {Object.keys(row).map((key) => {\n                return key !== \"site\" && key !== \"location\" ? <td>{row[key]}</td> : null;\n              })}\n            </tr>\n          );\n        })}\n      </table>\n    </div>\n  );\n}\n","// import react from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Map, InfoWindow, GoogleApiWrapper, Polygon } from \"google-maps-react\";\nimport Tabletop from \"tabletop\";\nimport InfoTable from \"./InfoTable\";\nimport DataTable from \"./DataTable\";\n\nexport function titleCase(str) {\n  str = str.toLowerCase().split(\" \");\n  for (var i = 0; i < str.length; i++) {\n    str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n  }\n  return str.join(\" \");\n}\n\nfunction MapContainer(props) {\n  const { google } = props;\n\n  const [data, setData] = useState({});\n  const [polygons, setPolygons] = useState({});\n  const [descriptions, setDescriptions] = useState({});\n  const [showInfoWindow, setShowInfoWindow] = useState(true);\n  const [activeLocation, setActiveLocation] = useState(\"\");\n  const [infoWindowPosition, setInfoWindowPosition] = useState(null);\n\n  function processData(spreadsheetData) {\n    const dirtData = {};\n    const polygonData = {};\n    const descriptions = {};\n\n    // loop through each tab and process according if it's a data or map-area tab\n    for (const tabName in spreadsheetData) {\n      if (tabName.includes(\"(Data)\")) {\n        const location = spreadsheetData[tabName].elements[0].location;\n\n        const filteredElements = spreadsheetData[tabName].elements.filter((el) => {\n          const date = new Date(el.date).getTime();\n          const today = new Date().getTime();\n          // filter for dates within past 90 days, units are in ms\n          return today - date < 90 * 24 * 60 * 60 * 1000;\n        });\n\n        dirtData[location] = filteredElements;\n      } else if (tabName === \"Map Coordinates\") {\n        spreadsheetData[tabName].elements.forEach((row) => {\n          const { location, lat, lng } = row;\n\n          const locationPolygon = polygonData[location];\n          if (!locationPolygon) {\n            polygonData[location] = [];\n          }\n          polygonData[row.location].push({\n            lat,\n            lng,\n          });\n        });\n      } else if (tabName === \"Descriptions\") {\n        spreadsheetData[tabName].elements.forEach((row) => {\n          descriptions[row.location] = row;\n        });\n      }\n    }\n    setDescriptions(descriptions);\n    setPolygons(polygonData);\n    setData(dirtData);\n  }\n\n  useEffect(() => {\n    Tabletop.init({\n      key: \"https://docs.google.com/spreadsheets/d/19Za-wgC1G_-TcFNm3j7iMpbmbF9P-PoaA_qKKhyRQCs/pubhtml\",\n      parseNumbers: true,\n      callback: processData,\n    });\n  }, []);\n\n  function onInfoWindowClose() {\n    setShowInfoWindow(false);\n    setActiveLocation(\"\");\n  }\n\n  function onMapClicked() {\n    if (showInfoWindow) {\n      onInfoWindowClose();\n    }\n    setShowInfoWindow(false);\n    setInfoWindowPosition(null);\n    setActiveLocation(\"\");\n  }\n\n  function onPolygonClick(polygon) {\n    setInfoWindowPosition(getPolygonPosition(polygon.paths));\n    setShowInfoWindow(true);\n  }\n\n  function getPolygonPosition(paths) {\n    // TODO: calculate the \"center\" of the polygon instead of returning a corner of it\n    return paths[0];\n  }\n\n  return (\n    <Map google={google} zoom={14} onClick={onMapClicked}>\n      {Object.keys(polygons).map((key) => {\n        return (\n          <Polygon\n            key={key}\n            paths={polygons[key]}\n            onClick={(polygon) => {\n              setActiveLocation(key);\n              onPolygonClick(polygon);\n            }}\n          />\n        );\n      })}\n      {activeLocation ? (\n        <InfoWindow position={infoWindowPosition} visible={showInfoWindow} onClose={onInfoWindowClose}>\n          <div className=\"info-window\">\n            <h1>{titleCase(activeLocation)}</h1>\n            <InfoTable name={activeLocation} info={descriptions[activeLocation]} />\n            <DataTable title=\"Past 90 Days\" rows={data[activeLocation]} />\n          </div>\n        </InfoWindow>\n      ) : null}\n    </Map>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBoaMwtEv26-QexJ0Zge-FhO08jVdYTioQ\",\n})(MapContainer);\n","import MapContainer from \"./MapContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}