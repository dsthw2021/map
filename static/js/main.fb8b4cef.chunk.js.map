{"version":3,"sources":["InfoTable.js","DataTable.js","UserInputs.js","MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["InfoTable","props","name","info","className","titleCase","Object","keys","filter","k","toLowerCase","map","key","DataTable","title","rows","length","col","row","isNaN","Date","date","getTime","location","UserInputs","showPolygon","showCircle","metric","onChangeShowMap","onChangeShowCircle","onChangeDate","onChangeMetric","dateOptions","metricOptions","useState","hidden","setHidden","onClick","type","id","checked","value","onChange","disabled","selected","el","str","words","split","i","titleCaseWithSlash","join","charAt","toUpperCase","slice","GoogleApiWrapper","apiKey","google","data","setData","polygons","setPolygons","descriptions","setDescriptions","showInfoWindow","setShowInfoWindow","activeLocation","setActiveLocation","infoWindowPosition","setInfoWindowPosition","setDate","setMetric","setShowPolygon","setShowCircle","circleRadii","setCircleRadii","showCircleHover","setShowCircleHover","processData","spreadsheetData","dirtData","polygonData","tabName","includes","elements","filteredElements","forEach","lat","lng","push","onInfoWindowClose","onPolygonClick","paths","getPolygonPosition","bounds","maps","LatLngBounds","latLngPaths","path","LatLng","extend","getCenter","calculateCircleRadii","circleDate","circleMetric","metrics","find","total","values","reduce","a","c","newRadii","radii","Math","floor","parseFloat","useEffect","Tabletop","init","parseNumbers","callback","e","target","zoom","color","team","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","polygon","onMouseover","onMouseout","position","visible","centerCoord","radius","center","onClose","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb8b4cef.chunk.js","sourcesContent":["import { titleCase } from \"./MapContainer\";\n\nexport default function InfoTable(props) {\n  const { name, info } = props;\n\n  return (\n    <table className=\"info-table\">\n      <tr>\n        <td className=\"bold\">Name</td>\n        <td>{titleCase(name)}</td>\n      </tr>\n      {!!info &&\n        Object.keys(info)\n          .filter((k) => k.toLowerCase() !== \"location\")\n          .map((key) => {\n            return (\n              <tr key={key}>\n                <td className=\"bold\">{titleCase(key)}</td>\n                <td>{info[key]}</td>\n              </tr>\n            );\n          })}\n    </table>\n  );\n}\n","export default function DataTable(props) {\n  const { title, rows } = props;\n\n  if (!rows || !rows.length) return;\n\n  return (\n    <div>\n      <h2>{title}</h2>\n      <table className=\"data-table\">\n        <tr>\n          {Object.keys(rows[0]).map((col) => (col.toLowerCase() !== \"location\" ? <th key={col}>{col}</th> : null))}\n        </tr>\n        {rows.map((row) => {\n          return (\n            <tr key={row.location}>\n              {Object.keys(row).map((key) => {\n                if (key !== \"site\" && key !== \"location\") {\n                  let className;\n                  if (isNaN(new Date(row.date).getTime())) {\n                    className = \"bold\";\n                  }\n\n                  return (\n                    <td className={className} key={key}>\n                      {row[key]}\n                    </td>\n                  );\n                }\n\n                return null;\n              })}\n            </tr>\n          );\n        })}\n      </table>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nexport default function UserInputs(props) {\n  const {\n    showPolygon,\n    showCircle,\n    date,\n    metric,\n    onChangeShowMap,\n    onChangeShowCircle,\n    onChangeDate,\n    onChangeMetric,\n    dateOptions,\n    metricOptions,\n  } = props;\n\n  const [hidden, setHidden] = useState(true);\n\n  if (hidden) {\n    return (\n      <div className=\"user-inputs\">\n        <button onClick={() => setHidden(false)}>More Options</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-inputs\">\n      <button onClick={() => setHidden(true)}>Hide</button>\n      <div className=\"user-input-section\">\n        <div className=\"user-input-label\">\n          <label>Show Map Area:</label>\n        </div>\n        <input\n          type=\"checkbox\"\n          id=\"show-map\"\n          name=\"show-map\"\n          checked={showPolygon}\n          value={showPolygon}\n          onChange={onChangeShowMap}\n        />\n      </div>\n\n      <div className=\"user-input-section\">\n        <div className=\"user-input-label\">\n          <label>Date:</label>\n        </div>\n        <select value={date} onChange={onChangeDate}>\n          <option disabled selected value>\n            -- select an option --\n          </option>\n          {dateOptions.map((el) => {\n            return (\n              <option key={el.date} value={el.date}>\n                {el.date}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div className=\"user-input-section\">\n        <div className=\"user-input-label\">\n          <label>Metric:</label>\n        </div>\n        <select value={metric} onChange={onChangeMetric}>\n          <option disabled selected value>\n            -- select an option --\n          </option>\n          {metricOptions.map((key) => {\n            return key !== \"date\" && key !== \"location\" ? (\n              <option key={key} value={key}>\n                {key}\n              </option>\n            ) : null;\n          })}\n        </select>\n      </div>\n      {date && metric ? (\n        <div className=\"user-input-section\">\n          <div className=\"user-input-label\">\n            <label>Show Circles:</label>\n          </div>\n          <input\n            type=\"checkbox\"\n            id=\"show-circle\"\n            name=\"show-circle\"\n            checked={showCircle}\n            value={showCircle}\n            onChange={onChangeShowCircle}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","// import react from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Map, InfoWindow, GoogleApiWrapper, Polygon, Circle } from \"google-maps-react\";\nimport Tabletop from \"tabletop\";\nimport InfoTable from \"./InfoTable\";\nimport DataTable from \"./DataTable\";\nimport UserInputs from \"./UserInputs\";\n\nexport function titleCase(str) {\n  const words = str.toLowerCase().split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    words[i] = titleCaseWithSlash(words[i]);\n  }\n\n  return words.join(\" \");\n}\n\nfunction titleCaseWithSlash(str) {\n  const words = str.toLowerCase().split(\"/\");\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n  }\n\n  return words.join(\"/\");\n}\n\nfunction MapContainer(props) {\n  const { google } = props;\n\n  const [data, setData] = useState({});\n  const [polygons, setPolygons] = useState({});\n  const [descriptions, setDescriptions] = useState({});\n  const [showInfoWindow, setShowInfoWindow] = useState(true);\n  const [activeLocation, setActiveLocation] = useState(\"\");\n  const [infoWindowPosition, setInfoWindowPosition] = useState(null);\n  const [date, setDate] = useState(null);\n  const [metric, setMetric] = useState(null);\n  const [showPolygon, setShowPolygon] = useState(true);\n  const [showCircle, setShowCircle] = useState(false);\n  const [circleRadii, setCircleRadii] = useState({});\n  const [showCircleHover, setShowCircleHover] = useState(false);\n\n  function processData(spreadsheetData) {\n    const dirtData = {};\n    const polygonData = {};\n    const descriptions = {};\n\n    // loop through each tab and process according if it's a data or map-area tab\n    for (const tabName in spreadsheetData) {\n      if (tabName.includes(\"(Data)\")) {\n        const location = spreadsheetData[tabName].elements[0].location;\n\n        const filteredElements = spreadsheetData[tabName].elements.filter((el) => {\n          const date = new Date(el.date).getTime();\n\n          // let through any that are not a date (could be \"Total\", etc.)\n          if (isNaN(date)) {\n            return true;\n          }\n\n          const today = new Date().getTime();\n          // filter for dates within past 90 days, units are in ms\n          return today - date < 90 * 24 * 60 * 60 * 1000;\n        });\n\n        dirtData[location] = filteredElements;\n      } else if (tabName === \"Map Coordinates\") {\n        spreadsheetData[tabName].elements.forEach((row) => {\n          const { location, lat, lng } = row;\n\n          const locationPolygon = polygonData[location];\n          if (!locationPolygon) {\n            polygonData[location] = [];\n          }\n          polygonData[row.location].push({\n            lat,\n            lng,\n          });\n        });\n      } else if (tabName === \"Descriptions\") {\n        spreadsheetData[tabName].elements.forEach((row) => {\n          descriptions[row.location] = row;\n        });\n      }\n    }\n    setDescriptions(descriptions);\n    setPolygons(polygonData);\n    setData(dirtData);\n  }\n\n  useEffect(() => {\n    Tabletop.init({\n      key: \"https://docs.google.com/spreadsheets/d/19Za-wgC1G_-TcFNm3j7iMpbmbF9P-PoaA_qKKhyRQCs/pubhtml\",\n      parseNumbers: true,\n      callback: processData,\n    });\n  }, []);\n\n  function onInfoWindowClose() {\n    setShowInfoWindow(false);\n    setActiveLocation(\"\");\n  }\n\n  function onMapClicked() {\n    if (showInfoWindow) {\n      onInfoWindowClose();\n    }\n    setShowInfoWindow(false);\n    setInfoWindowPosition(null);\n    setActiveLocation(\"\");\n  }\n\n  function onPolygonClick(paths) {\n    setInfoWindowPosition(getPolygonPosition(paths));\n    setShowInfoWindow(true);\n    setShowCircleHover(false);\n  }\n\n  function getPolygonPosition(paths) {\n    let bounds = new google.maps.LatLngBounds();\n    const latLngPaths = paths.map((path) => new google.maps.LatLng(path.lat, path.lng));\n\n    for (let i = 0; i < latLngPaths.length; i++) {\n      bounds.extend(latLngPaths[i]);\n    }\n\n    return bounds.getCenter();\n  }\n\n  function calculateCircleRadii(circleDate, circleMetric) {\n    if (!circleDate || !circleMetric) return {};\n\n    const metrics = {};\n    Object.keys(data).forEach((location) => {\n      metrics[location] = data[location].find((row) => {\n        return row.date === circleDate;\n      })[circleMetric];\n    });\n\n    const totalRadii = 1500;\n    const total = Object.values(metrics).reduce((a, c) => a + c);\n\n    const newRadii = {};\n    for (const location in metrics) {\n      newRadii[location] = {\n        value: metrics[location],\n        radii: total ? Math.floor(parseFloat(metrics[location] / total) * totalRadii) : 0,\n      };\n    }\n\n    setCircleRadii(newRadii);\n  }\n\n  return (\n    <div>\n      <UserInputs\n        showPolygon={showPolygon}\n        showCircle={showCircle}\n        date={date}\n        metric={metric}\n        onChangeShowMap={() => setShowPolygon(!showPolygon)}\n        onChangeShowCircle={() => setShowCircle(!showCircle)}\n        onChangeDate={(e) => {\n          setDate(e.target.value);\n          calculateCircleRadii(e.target.value, metric);\n        }}\n        onChangeMetric={(e) => {\n          setMetric(e.target.value);\n          calculateCircleRadii(date, e.target.value);\n        }}\n        dateOptions={data[Object.keys(data)[0]] ? data[Object.keys(data)[0]] : []}\n        metricOptions={Object.keys(data).length ? Object.keys(data[Object.keys(data)[0]][0]) : []}\n      />\n\n      <Map google={google} zoom={14} onClick={onMapClicked}>\n        {showPolygon\n          ? Object.keys(polygons).map((key) => {\n              let color;\n\n              if (descriptions[key].team === \"Market\") {\n                color = \"orange\";\n              } else if (descriptions[key].team === \"Mission\") {\n                color = \"lightgreen\";\n              }\n\n              return (\n                <Polygon\n                  key={key}\n                  paths={polygons[key]}\n                  strokeColor={color}\n                  strokeOpacity={0.35}\n                  strokeWeight={2}\n                  fillColor={color}\n                  fillOpacity={0.35}\n                  onClick={(polygon) => {\n                    setActiveLocation(key);\n                    onPolygonClick(polygon.paths);\n                  }}\n                  onMouseover={() => {\n                    if (!showInfoWindow) {\n                      setActiveLocation(key);\n                      setShowCircleHover(true);\n                    }\n                  }}\n                  onMouseout={() => {\n                    if (!showInfoWindow) {\n                      setShowCircleHover(false);\n                      setActiveLocation(\"\");\n                    }\n                  }}\n                />\n              );\n            })\n          : null}\n        {!!circleRadii[activeLocation] ? (\n          <InfoWindow\n            position={getPolygonPosition(polygons[activeLocation])}\n            visible={showCircle && showCircleHover && !!activeLocation}\n          >\n            <span>{circleRadii[activeLocation].value}</span>\n          </InfoWindow>\n        ) : null}\n        {showCircle\n          ? Object.keys(polygons).map((key) => {\n              let color;\n\n              if (descriptions[key].team === \"Market\") {\n                color = \"red\";\n              } else if (descriptions[key].team === \"Mission\") {\n                color = \"blue\";\n              }\n              const centerCoord = getPolygonPosition(polygons[key]);\n              return (\n                <Circle\n                  key={key}\n                  radius={circleRadii[key] ? circleRadii[key].radii : 0}\n                  center={centerCoord}\n                  strokeColor={color}\n                  strokeOpacity={0}\n                  strokeWeight={5}\n                  fillColor={color}\n                  fillOpacity={0.6}\n                  onClick={() => {\n                    setActiveLocation(key);\n                    onPolygonClick(polygons[key]);\n                  }}\n                  onMouseover={() => {\n                    if (!showInfoWindow) {\n                      setActiveLocation(key);\n                      setShowCircleHover(true);\n                    }\n                  }}\n                  onMouseout={() => {\n                    if (!showInfoWindow) {\n                      setShowCircleHover(false);\n                      setActiveLocation(\"\");\n                    }\n                  }}\n                />\n              );\n            })\n          : null}\n        {activeLocation ? (\n          <InfoWindow position={infoWindowPosition} visible={showInfoWindow} onClose={onInfoWindowClose}>\n            <div className=\"info-window\">\n              <h1>{titleCase(activeLocation)}</h1>\n              <InfoTable name={activeLocation} info={descriptions[activeLocation]} />\n              <DataTable title=\"Past 90 Days\" rows={data[activeLocation]} />\n            </div>\n          </InfoWindow>\n        ) : null}\n      </Map>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBoaMwtEv26-QexJ0Zge-FhO08jVdYTioQ\",\n})(MapContainer);\n","import MapContainer from \"./MapContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}